# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'b32f3c6a-5c28-46c3-b005-3ccb3482d3fd'
  imageRepository: 'sirichankonedockerspringboot'
  containerRegistry: 'mysreeacrrepo32.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: Build a docker image
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
  # Install Trivy Scanner On Agent
    - task: Bash@3
      displayName: "Install Trivy"
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

  # Run Trivy Scan
    - task: Bash@3
      displayName: "Run Trivy Scan"
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image \
          --severity HIGH,CRITICAL,MEDIUM \
          --ignore-unfixed \
          --exit-code 1 \
          --format json \
          --output trivy-report.json \
          $(containerRegistry)/$(imageRepository):$(tag)
  
  # Push docker image
    - task: Docker@2
      displayName:  push an image to container registry
      inputs:
        command: Push
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
